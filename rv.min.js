

function initVars() {
//        window.clearTimeout(timer);
  ecc = Number(eSlider.value);
  semia = Math.pow(10,Number(aSlider.value));
  PlanetMass =  Math.pow(10,Number(mSlider.value));
  showNewEccentricity();
  showNewA();
  showNewMass();
  document.getElementById('myButton').value = 'Stop'



  mtot = 1 + PlanetMass;
  ReducedMass = PlanetMass/mtot;
  sfac = PlanetMass/mtot;


  PlanetX = semia*(1-ecc)/(1+PlanetMass);
  PlanetY = 0;
  PlanetVx = 0;
  PlanetVy = Math.sqrt((1+ecc)*NewtG*mtot/(semia*(1-ecc)));
  PlanetVy /= (1+PlanetMass);
//        PlanetVy = Math.sqrt(mtot*(1+ecc)/(semia*(1-ecc)));

  SunX = -PlanetX*PlanetMass;
  SunY = -PlanetY*PlanetMass;
  SunVx = - PlanetVx*PlanetMass;
  SunVy = - PlanetVy*PlanetMass;

  chartx = 0;
  chartx2 = 0;
  charty = PlanetX;
  chartyS = SunX;
  charty2 = Math.sqrt(PlanetVy*PlanetVy+PlanetVx*PlanetVx)* VtoKms;
  charty2S = Math.sqrt(SunVy*SunVy+SunVx*SunVx)* VtoKms;


  var aubin = setScale();

  drawSun();
  drawPlanet();
  clearTrails();
  drawBar(aubin);
  Moving = true;

  dt = Math.pow(semia*(1-ecc),1.5)/200.;
  dt2 = dt*dt;
  totaltime = 0;
  count = 0;
  timeResolution = Math.pow(semia,1.5)/PointsPerOrbit;

  clearChart();
  updateChart();

  startIntegration();


}
function setScale() {
  var nb;
  var auBins = [.1, .3, 1,3, 10, 30, 100];
  for (var i=0; i<auBins.length; i++) {
    if (semia <= auBins[i] ) {
      nb = auBins[i];
      AuPerPixel = 1.5*2*auBins[i]*(1+ecc)/theCanvas.width; // Sun
      break;
    }
  }
  return nb;
}
function drawBar(nb) {
  trailContext.beginPath();
  trailContext.moveTo(20, 20);
  trailContext.lineTo(nb/AuPerPixel + 20 , 20);
  trailContext.stroke();
  trailContext.font = "15px sans-serif";
  trailContext.fillText(nb + " Au",nb/AuPerPixel + 25,25);

  trailContext.beginPath();
  trailContext.moveTo(20, 40);
  trailContext.lineTo(1./AuPerPixel + 20 , 40);
  trailContext.stroke();
  trailContext.font = "15px sans-serif";
  trailContext.fillText("Earth's Orbit",1/AuPerPixel + 25,45);

}
// function stopIntegration() {
//   Moving = false;
//   console.log([PlanetVx,PlanetVy])
//
// }
// function startIntegration() {
//   if (!Moving) {
//     Moving = true;
//     console.log([PlanetVx,PlanetVy])
//     moveSystem();
//   }
//}
function buttonChange() {
  if (Moving) {
    Moving=false;
    console.log([AuPerPixel])
    document.getElementById('myButton').value = 'Start'
  }
  else {
    Moving =true;
    document.getElementById('myButton').value = 'Stop'
    console.log([AuPerPixel])
    startIntegration();

  }
}


function calcReducedMass() {
  ReducedMass = PlanetMass/(1 + PlanetMass);
}


function drawSun() {

  var pixelX = theCanvas.width/2 + SunX/AuPerPixel;
  var pixelY = theCanvas.height/2 + SunY/AuPerPixel; // Sun

  theContext.clearRect(0, 0, theCanvas.width, theCanvas.height);
  theContext.beginPath();
  theContext.arc(pixelX,pixelY, 20, 0, 2*Math.PI);
  theContext.fillStyle = "#FFFF00"
  theContext.fill();
  trailContext.fillRect(pixelX-0.5, pixelY-0.5, 1, 1);

  pixelX = theCanvas.width/2;
  pixelY = theCanvas.height/2;
  theContext.beginPath();
  theContext.arc(pixelX,pixelY,3,0,2*Math.PI);
  theContext.fillStyle = "black"
  theContext.fill();

  pixelX = theCanvas.width/2 + PlanetX/AuPerPixel;
  pixelY = theCanvas.height/2 + PlanetY/AuPerPixel;

  theContext.beginPath();
  theContext.arc(pixelX,pixelY, PlanetSize, 0, 2*Math.PI);
  theContext.fillStyle = PlanetColor; //"#2E2EFE";
  theContext.fill();
  trailContext.fillRect(pixelX-0.5, pixelY-0.5, 1, 1);

}

function drawPlanet() {
  // var pixelX = theCanvas.width/2 + PlanetX/AuPerPixel;
  // var pixelY = theCanvas.height/2 + PlanetY/AuPerPixel;
  //
  // thePlanetContext.clearRect(0, 0, theCanvas.width, theCanvas.height);
  // thePlanetContext.beginPath();
  // thePlanetContext.arc(pixelX,pixelY, 10, 0, 2*Math.PI);
  // thePlanetContext.fillStyle = "#2E2EFE";
  // thePlanetContext.fill();
  // trailPlanetContext.fillRect(pixelX-0.5, pixelY-0.5, 1, 1);

}

function startIntegration() {
  if (Moving) {
    timer = window.setInterval(moveSystemCheck, 1000/fps);
  }
}
function moveSystemCheck() {
  if (Moving) {
    moveSystem();
  }
}
function moveSystem() {



  var sep = [ PlanetX-SunX, PlanetY-SunY];
  var vsep = [PlanetVx - SunVx, PlanetVy - SunVy];
  var accel = computeAccel(sep);


  sep[0] += vsep[0]*dt + .5*accel[0]*dt2;
  sep[1] += vsep[1]*dt + .5*accel[1]*dt2;

  vsep[0] += .5*accel[0]*dt;
  vsep[1] += .5*accel[1]*dt;

  accel = computeAccel(sep);
  vsep[0] += .5*accel[0]*dt;
  vsep[1] += .5*accel[1]*dt;


  PlanetVx = vsep[0]/mtot;
  PlanetVy = vsep[1]/mtot;
  PlanetX = sep[0]/mtot;
  PlanetY = sep[1]/mtot;

  SunVx = -vsep[0]*sfac;
  SunVy = -vsep[1]*sfac;
  SunX = -sep[0]*sfac;
  SunY = -sep[1]*sfac;
  drawSun();
  drawPlanet();

  totaltime += dt;
  count += dt;

  if (count >= timeResolution) {
    chartx = totaltime;
    charty =  PlanetX;//SunVy*VtoKms;
    chartx2 = PlanetX;
    chartyS = SunX;
    charty2 = Math.sqrt(PlanetVy*PlanetVy + PlanetVx*PlanetVx)* VtoKms;
    charty2S = Math.sqrt(SunVy*SunVy+SunVx*SunVx)* VtoKms;
    updateChart();
    count = 0;
  }







}

function computeAccel(sep) {
  var rad = Math.sqrt(sep[0]*sep[0] + sep[1]*sep[1]);
  var rad3 = rad*rad*rad;
  var fac = -NewtG*mtot/rad3;
  return [fac*sep[0],fac*sep[1]]
}

function showNewEccentricity() {
  eReadout.innerHTML = ecc;
}
function showNewA() {
  aReadout.innerHTML = semia.toFixed(2) + '&nbsp; Au'
}
function showNewMass() {
  // -5.5 to 0
  // size = (20-5)/(0 + 5.5)*(mval +5.5) + 5
   PlanetSize = 5 + 15*(Number(mSlider.value) + 5.5)/(5.5);
//   PlanetSize = Math.round(PlanetSize);
  console.log(mSlider.value+5.5)
   console.log(5 + 15*(Number(mSlider.value) + 5.5)/(5.5))
  var lbl,num;
  if (Number(mSlider.value) < -4.3) {
    lbl = '&nbsp Earths';
    num = (SuntoEarth*PlanetMass).toFixed(2);
    PlanetColor = 'blue';
  }
  else if (Number(mSlider.value) < -3.5) {
    lbl = '&nbsp Neptunes';
    num = (SuntoNeptune*PlanetMass).toFixed(2);
    PlanetColor = 'green'
  }
  else if (Number(mSlider.value) < -1) {
    lbl = '&nbsp Jupiters';
    num = (SuntoJupiter*PlanetMass).toFixed(2);
    PlanetColor = 'orange';
  }
  else {
    lbl = '&nbsp Suns';
    num = PlanetMass.toFixed(2);
    PlanetColor = 'yellow';

  }
  mReadout.innerHTML = num + lbl
}



function clearTrails() {
  trailContext.clearRect(0, 0, theCanvas.width, theCanvas.height);

//  trailSunContext.clearRect(0, 0, theCanvas.width, theSunCanvas.height);
}


function clearChart() {
  try {
    chart.destroy();
    chart2.destroy();

  }
  catch (err) {
  }

  dps = [{x:chartx,y:charty}];
  dps2 = [{x:chartx,y:charty2}];
  dpsS = [{x:chartx,y:chartyS}];
  dps2S = [{x:chartx,y:charty2S}];
  chart = new CanvasJS.Chart("chartContainer",{
    theme: "theme1",
    backgroundColor: "#E6E6E6",
    title :{
      text: "Position of Planet (blue) and Sun (red) in Au vs Time (yrs)",
    },
    axisX :{
      title: "Time (yrs)",
    },
    axisY : {
      title: 'Position (AU)',
    },
    data: [{
      label:"X",
      type: "line",
      dataPoints: dps
    },{
      label:"Y",
      type: "line",
      dataPoints: dpsS
    }]
  });
  chart2 = new CanvasJS.Chart("chartContainer2",{
    theme: "theme1",
    backgroundColor: "#E6E6E6",
    title :{
      text: "Speed of Planet (blue) and Sun (red) in km/s vs Time (yrs)",
    },
    axisX :{
      title: "Time (yrs)",
    },
    axisY : {
      title: 'Speed (km/s)',
    },
    data: [{
      label:"V",
      type: "line",
      dataPoints: dps2
    },{
      label:"VS",
      type: "line",
      dataPoints: dps2S
    }]
  });

}


function updateChart() {
  // count is number of times loop runs to generate random dataPoints.
    dps.push({
      x: chartx,
      y: charty
    });
    dps2.push({
      x: chartx,
      y: charty2
    });
    dpsS.push({
      x: chartx,
      y: chartyS
    });
    dps2S.push({
      x: chartx,
      y: charty2S
    });


  if (dps.length > dataLength)
  {
    dps.shift();
    dps2.shift();
    dpsS.shift();
    dps2S.shift();
  }

  chart.render();
  chart2.render();

};
